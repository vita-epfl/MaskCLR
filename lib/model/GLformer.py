import math
import logging
from functools import partial
from collections import OrderedDict
from einops import rearrange

import torch
import torch.nn as nn
import torch.nn.functional as F

from timm.models.layers import DropPath

import warnings

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)



class PositionalEmbedding(nn.Module):

    def __init__(self, d_model, max_len=150):
        super().__init__()

        # Compute the positional encodings once in log space.
        pe = torch.zeros(max_len, d_model).float()
        pe.require_grad = False

        position = torch.arange(0, max_len).float().unsqueeze(1)
        div_term = (torch.arange(0, d_model, 2).float() * -(math.log(10000.0) / d_model)).exp()

        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)

        pe = pe.unsqueeze(0)
        self.register_buffer('pe', pe)

    def forward(self, x):
        return self.pe[:, :x.size(1)]

class Attention(nn.Module):
    def __init__(self, dim_emb, num_heads=8, qkv_bias=False, attn_do_rate=0., proj_do_rate=0.):
        super().__init__()
        self.dim_emb = dim_emb
        self.num_heads = num_heads
        dim_each_head = dim_emb // num_heads
        self.scale = dim_each_head ** -0.5

        self.qkv = nn.Linear(dim_emb, dim_emb * 3, bias=qkv_bias)
        self.attn_dropout = nn.Dropout(attn_do_rate)
        self.proj = nn.Linear(dim_emb, dim_emb)  
        self.proj_dropout = nn.Dropout(proj_do_rate)

    def forward(self, x, mask=None):

        B, N, C = x.shape  

        qkv = self.qkv(x)
        qkv = qkv.reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)

        q, k, v = qkv[0], qkv[1], qkv[2]  
        attn = (q @ k.transpose(-2, -1)) * self.scale
        
        if mask is not None:
            attn = attn.masked_fill(mask == 0, -1e9)

        attn = attn.softmax(dim=-1)
        attn = self.attn_dropout(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_dropout(x)

        return x, attn

class FeedForward(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, do_rate=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = nn.GELU()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.dropout = nn.Dropout(do_rate)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.dropout(x)
        x = self.fc2(x)
        x = self.dropout(x)
        return x

class TransformerEncoder(nn.Module):
    def __init__(self, num_joint=50, num_frame=150, dim_emb=48, 
                num_heads=8, ff_expand=1.0, qkv_bias=False, attn_do_rate=0., proj_do_rate=0., drop_path=0., positional_emb_type='learnalbe'):

        super(TransformerEncoder, self).__init__()

        self.positional_emb_type = positional_emb_type

        # for learnable positional embedding
        self.positional_emb = nn.Parameter(torch.zeros(1, num_frame, num_joint, dim_emb))

        # for fixed positional embedding (ablation)
        self.tm_pos_encoder = PositionalEmbedding(num_joint*dim_emb, num_frame)
        self.sp_pos_encoder = PositionalEmbedding(dim_emb, num_joint)

        self.norm1_sp = nn.LayerNorm(dim_emb)
        self.norm1_tm = nn.LayerNorm(dim_emb*num_joint)

        self.attention_sp = Attention(dim_emb, num_heads, qkv_bias, attn_do_rate, proj_do_rate)
        self.attention_tm = Attention(dim_emb*num_joint, num_heads, qkv_bias, attn_do_rate, proj_do_rate)

        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        
        self.norm2 = nn.LayerNorm(dim_emb*num_joint)
        self.feedforward = FeedForward(in_features=dim_emb*num_joint, hidden_features=int(dim_emb*num_joint*ff_expand), 
                                        out_features=dim_emb*num_joint, do_rate=proj_do_rate)
                            

    def forward(self, x, mask=None, positional_emb=False):

        b, f, j, c = x.shape

        ## spatial-MHA
        x_sp = rearrange(x, 'b f j c  -> (b f) j c', )
        if positional_emb==True:
            if self.positional_emb_type=='fix':
                x_sp = x_sp + self.sp_pos_encoder(x_sp)
            else:
                pos_emb = self.positional_emb.repeat(b, 1,1,1)
                pos_emb = rearrange(pos_emb, 'b f j c -> (b f) j c', b=b, f=f)
                x_sp = x_sp + pos_emb


        #print("Input to spatial: ", x_sp.shape)
        temp, attn = self.attention_sp(self.norm1_sp(x_sp), mask=None)

        x_sp = x_sp + self.drop_path(temp)
  
        ## temporal-MHA
        x_tm = rearrange(x_sp, '(b f) j c -> b f (j c)', b=b, f=f)
        if positional_emb==True:
            if self.positional_emb_type=='fix':
                x_tm = x_tm + self.tm_pos_encoder(x_tm)
            else:
                pos_emb = rearrange(pos_emb, '(b f) j c -> b f (j c)', b=b, f=f)
                x_tm = x_tm + pos_emb

        temp, _ = self.attention_tm(self.norm1_tm(x_tm), mask=mask)

        x_tm = x_tm + self.drop_path(temp)

        x_out = x_tm
        x_out = x_out + self.drop_path(self.feedforward(self.norm2(x_out)))
        x_out = rearrange(x_out, 'b f (j c)  -> b f j c', j=j)

        return x_out, attn

class ST_Transformer(nn.Module):

    def __init__(self, num_frame, num_joint, input_channel, dim_joint_emb,
                depth, num_heads, qkv_bias, ff_expand, do_rate, attn_do_rate,
                drop_path_rate, add_positional_emb, positional_emb_type):

        super(ST_Transformer, self).__init__()

        self.num_joint = num_joint
        self.num_frame = num_frame
        self.add_positional_emb = add_positional_emb
        
        self.dropout = nn.Dropout(p=do_rate)
        self.norm = nn.LayerNorm(dim_joint_emb*num_joint)

        self.emb = nn.Linear(input_channel, dim_joint_emb)
        self.emb_global = nn.Linear(input_channel, dim_joint_emb)
        self.pred_token_emb = nn.Parameter(torch.zeros(1, 1, num_joint, dim_joint_emb))

        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]

        self.encoder_blocks = nn.ModuleList(
            [TransformerEncoder(num_joint, num_frame, dim_joint_emb, 
            num_heads, ff_expand, qkv_bias, attn_do_rate, do_rate, dpr[i], positional_emb_type) 
            for i in range(depth)]
        )
        
        self.mlp = nn.Sequential(
                                nn.Linear(dim_joint_emb*num_joint, dim_joint_emb*num_joint),
                                nn.GELU(),
                                nn.LayerNorm(dim_joint_emb*num_joint),
                                nn.Linear(dim_joint_emb*num_joint, dim_joint_emb*num_joint),
                                nn.GELU(),
                                nn.LayerNorm(dim_joint_emb*num_joint),
                                )

        self.mask_token = nn.Parameter(torch.zeros(1, 1, dim_joint_emb))
        trunc_normal_(self.mask_token, std=.02)


        self.pre_logits = nn.Sequential(OrderedDict([
                ('fc', nn.Linear(dim_joint_emb, 512)),
                ('act', nn.Tanh())
            ]))

    def attention_guided_random_masking(self, x, attention_map, mask_ratio=0.5, tau=0.75):
        """
        Perform per-sample random masking by per-sample shuffling.
        Per-sample shuffling is done by argsort random noise.
        x: [NM, L, D], sequence
        x_orig: patchified original skeleton sequence
        """
        
        #print(x.shape, attention_map.shape)
        
        J, NMT, D = x.shape  # people * batch, joints * time, dim -> people * batch * time, joints, dim

        #x = x.permute(1, 0, 2)  #J , NMT, D

        #NM, L, D = x.shape  # people * batch, joints * time, dim -> people * batch * time, joints, dim 
        # _, TP, VP, _ = x_orig.shape
        
        len_keep = int(NMT * (1 - mask_ratio))

        # x_orig_motion = torch.zeros_like(x_orig)
        # x_orig_motion[:, 1:, :, :] = torch.abs(x_orig[:, 1:, :, :] - x_orig[:, :-1, :, :])
        # x_orig_motion[:, 0, :, :] = x_orig_motion[:, 1, :, :]

        #print(attention_map.shape)

        NMT, J = attention_map.shape  # 972, 17

        attention_map = attention_map.permute(1,0) # 17, 972 - > J , NMT

        # attention_map = attention_map.mean(dim=[3])  # NM, TP, VP
        # attention_map = attention_map.reshape(NM, L)

        attention_map = attention_map / (torch.max(attention_map, dim=-1, keepdim=True).values * tau + 1e-10)
        attention_map = attention_map.softmax( dim=-1)

        noise = torch.log(attention_map) - torch.log(-torch.log(torch.rand(J, NMT, device=x.device) + 1e-10) + 1e-10)  # gumble

        # noise = torch.rand(N, L, device=x.device)  # noise in [0, 1]

        # sort noise for each sample
        ids_shuffle = torch.argsort(
            noise, dim=1
        )  # ascend: small is keep, large is remove
        ids_restore = torch.argsort(ids_shuffle, dim=1)

        # keep the first subset
        ids_keep = ids_shuffle[:, :len_keep]
        x_masked = torch.gather(x, dim=1, index=ids_keep.unsqueeze(-1).repeat(1, 1, D))

        # generate the binary mask: 0 is keep, 1 is remove
        mask = torch.ones([J, NMT], device=x.device)
        mask[:, :len_keep] = 0
        # unshuffle to get the binary mask
        mask = torch.gather(mask, dim=1, index=ids_restore)

        #x_masked = x_masked.permute(1, 0, 2)  # J , NMT, D -> NMT, J, D

        return x_masked, mask, ids_restore, ids_keep
    
    def encoder(self, x, mask=None, attention= None):

        b, c, f, j = x.shape

        ## generate input embeddings
        x = rearrange(x, 'b c f (j p) -> b c f j p', p=1)
        x_joints = torch.cat((x[:,:,:,:8,:], x[:,:,:,9:,:]), axis=3)
        x_global = x[:,:,:,8,:].unsqueeze(3)

        x_joints = rearrange(x_joints, 'b c f j p -> b f j p c')
        x_global = rearrange(x_global, 'b c f j p -> b f j p c')
        x_joints = self.emb(x_joints)  # joint embedding layer
        x_global = self.emb_global(x_global)  # global translation embedding layer

        #print("x_joints: ", x_joints.shape, " x_global: ", x_global.shape)

        x = torch.cat((x_joints[:,:,:8,:,:], x_global, x_joints[:,:,8:,:,:]), axis=2)
        x = rearrange(x, 'b f j p c-> b f (j p) c',)
        
        x = self.dropout(x) # torch.Size([4, 243, 17, 48])

        #print("input to transformer: ", x.shape)

        if attention is not None:
            #print("before x_orig shape: ", x_orig.shape )
            #x_orig = x_orig.reshape(shape=(NM, TP, VP, -1))
            #print("x_orig input to masking shape: ", x_orig.shape )
            B, F, J, C = x.shape
            x = x.reshape(-1, J, C)

            x = x.permute(1, 0, 2)  #J , NMT, D
            J , NMT, D = x.shape

            x, _, ids_restore, _ = self.attention_guided_random_masking(x, attention)

            mask_tokens = self.mask_token.repeat(J, NMT - x.shape[1], 1)

            #print("mask_tokens: ", mask_tokens.shape)

            x_ = torch.cat([x[:, :, :], mask_tokens], dim=1)  # no cls token
            x_ = torch.gather(
                x_, dim=1, index=ids_restore.unsqueeze(-1).repeat(1, 1, x_.shape[2])
            )  # unshuffle

            x = x_.permute(1, 0, 2)

            x = x.reshape(B, F, J, C )
            #print("input to transformer after masking: ", x.shape)

        ## GL-Transformer blocks
        for i, block in enumerate(self.encoder_blocks):
            if self.add_positional_emb:
                positional_emb=True
            else:
                positional_emb = False
            x, attn = block(x, mask, positional_emb)
            attn = torch.mean(attn, axis=1).detach()

        attn = torch.sum(attn, axis=1).detach()

        x = rearrange(x, 'b f j k -> b f (j k)',j=j)
        x = self.norm(x)

        return x, attn


    def forward(self, x, attn=None):

        B,F,J,C  = x.shape
        
        x = x.permute(0, 3, 1, 2) # B, F, J, C -> B, C, F, J

        #print(x.shape)

        B,C,F,J = x.shape
        ## make attention mask for [PAD] tokens
        x_m = x[:,0,:,0]
        mask = (x_m != 99.9).unsqueeze(1).repeat(1, x_m.size(1), 1).unsqueeze(1)

        x, attn = self.encoder(x, mask, attention= attn)

        #print("x encoder: ", x.shape, " attn encoder: ", attn.shape)

        ## MLP
        x = self.mlp(x) 

        x = x.reshape(B,F,J,-1)

        x = self.pre_logits(x) 

        return x, attn
    
    def get_representation(self, x, j_importances=None, mask_drop=False):
        return self.forward(x, attn=j_importances)
        
B,F,J,C = 4,243,17,3 # b, c, f, j

inp = torch.rand(B,F,J,C)

model = ST_Transformer(num_frame=243, num_joint=17, input_channel=3, dim_joint_emb=48,
                depth=5, num_heads=8, qkv_bias=True, ff_expand=2.0, do_rate=0.1, attn_do_rate=0.1,
                drop_path_rate=0.1, add_positional_emb=1, positional_emb_type='learnable')

out, attn = model.get_representation(inp)

print(out.shape)

inp = torch.rand(B,F,J,C)

out, _ = model.get_representation(inp, attn)

print(out.shape)